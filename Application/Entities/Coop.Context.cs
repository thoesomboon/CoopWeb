//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Coop.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CoopWebEntities : DbContext
    {
        public CoopWebEntities()
            : base("name=CoopWebEntities")
        {
        }

        public CoopWebEntities(string nameOrConnectionString) : base(nameOrConnectionString)
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CoopControl> CoopControl { get; set; }
        public virtual DbSet<DepositType> DepositType { get; set; }
        public virtual DbSet<Interest> Interest { get; set; }
        public virtual DbSet<LoanType> LoanType { get; set; }
        public virtual DbSet<Modules> Modules { get; set; }
        public virtual DbSet<TxnCode> TxnCode { get; set; }
        public virtual DbSet<Deposit> Deposit { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<Loan> Loan { get; set; }
        public virtual DbSet<LoanDue> LoanDue { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<MonthBalanceDeposit> MonthBalanceDeposit { get; set; }
        public virtual DbSet<MonthBalanceLoan> MonthBalanceLoan { get; set; }
        public virtual DbSet<NoBook> NoBook { get; set; }
        public virtual DbSet<NoCard> NoCard { get; set; }
        public virtual DbSet<RequestLoan> RequestLoan { get; set; }
        public virtual DbSet<RequestLoanDue> RequestLoanDue { get; set; }
        public virtual DbSet<Security> Security { get; set; }
        public virtual DbSet<YearBalanceDeposit> YearBalanceDeposit { get; set; }
        public virtual DbSet<YearBalanceLoan> YearBalanceLoan { get; set; }
        public virtual DbSet<AccessPermissions> AccessPermissions { get; set; }
        public virtual DbSet<AccessTransactions> AccessTransactions { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<MilkPayment> MilkPayment { get; set; }
        public virtual DbSet<TtlfDeposit> TtlfDeposit { get; set; }
        public virtual DbSet<TtlfLoan> TtlfLoan { get; set; }
        public virtual DbSet<AccountPeriod> AccountPeriod { get; set; }
        public virtual DbSet<DiscountIntFlag> DiscountIntFlag { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Filestatus> Filestatus { get; set; }
        public virtual DbSet<InstallMethod> InstallMethod { get; set; }
        public virtual DbSet<MemberGroup> MemberGroup { get; set; }
        public virtual DbSet<MemberType> MemberType { get; set; }
        public virtual DbSet<ModuleCategories> ModuleCategories { get; set; }
        public virtual DbSet<Period> Period { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<Reason> Reason { get; set; }
        public virtual DbSet<SubDistrict> SubDistrict { get; set; }
        public virtual DbSet<Title> Title { get; set; }
        public virtual DbSet<UserTypes> UserTypes { get; set; }
        public virtual DbSet<SecurityType> SecurityType { get; set; }
    
        public virtual ObjectResult<BatMilk2Deposit_Result> BatMilk2Deposit(string coopID, Nullable<System.DateTime> calcDate, string branchId, string userId, string programName, string workStationId)
        {
            var coopIDParameter = coopID != null ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(string));
    
            var calcDateParameter = calcDate.HasValue ?
                new ObjectParameter("CalcDate", calcDate) :
                new ObjectParameter("CalcDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var workStationIdParameter = workStationId != null ?
                new ObjectParameter("WorkStationId", workStationId) :
                new ObjectParameter("WorkStationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatMilk2Deposit_Result>("BatMilk2Deposit", coopIDParameter, calcDateParameter, branchIdParameter, userIdParameter, programNameParameter, workStationIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> BatMthDepositBal(Nullable<int> coopID, string depTypeID, Nullable<int> userId, string budgetYear, Nullable<int> period)
        {
            var coopIDParameter = coopID.HasValue ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(int));
    
            var depTypeIDParameter = depTypeID != null ?
                new ObjectParameter("DepTypeID", depTypeID) :
                new ObjectParameter("DepTypeID", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var budgetYearParameter = budgetYear != null ?
                new ObjectParameter("BudgetYear", budgetYear) :
                new ObjectParameter("BudgetYear", typeof(string));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("BatMthDepositBal", coopIDParameter, depTypeIDParameter, userIdParameter, budgetYearParameter, periodParameter);
        }
    
        public virtual ObjectResult<BatPeriodSavingIntDue_Result> BatPeriodSavingIntDue(string coopID, string depTypeID, Nullable<System.DateTime> calcDate, string branchId, string userId, string programName, string workStationId)
        {
            var coopIDParameter = coopID != null ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(string));
    
            var depTypeIDParameter = depTypeID != null ?
                new ObjectParameter("DepTypeID", depTypeID) :
                new ObjectParameter("DepTypeID", typeof(string));
    
            var calcDateParameter = calcDate.HasValue ?
                new ObjectParameter("CalcDate", calcDate) :
                new ObjectParameter("CalcDate", typeof(System.DateTime));
    
            var branchIdParameter = branchId != null ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var workStationIdParameter = workStationId != null ?
                new ObjectParameter("WorkStationId", workStationId) :
                new ObjectParameter("WorkStationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatPeriodSavingIntDue_Result>("BatPeriodSavingIntDue", coopIDParameter, depTypeIDParameter, calcDateParameter, branchIdParameter, userIdParameter, programNameParameter, workStationIdParameter);
        }
    
        public virtual int BatPeriodSpecialClearTimeWDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BatPeriodSpecialClearTimeWDL");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> BatYrDepositBal(Nullable<int> coopID, string depTypeID, Nullable<int> userId, string budgetYear, Nullable<int> period1, Nullable<int> period2)
        {
            var coopIDParameter = coopID.HasValue ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(int));
    
            var depTypeIDParameter = depTypeID != null ?
                new ObjectParameter("DepTypeID", depTypeID) :
                new ObjectParameter("DepTypeID", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var budgetYearParameter = budgetYear != null ?
                new ObjectParameter("BudgetYear", budgetYear) :
                new ObjectParameter("BudgetYear", typeof(string));
    
            var period1Parameter = period1.HasValue ?
                new ObjectParameter("Period1", period1) :
                new ObjectParameter("Period1", typeof(int));
    
            var period2Parameter = period2.HasValue ?
                new ObjectParameter("Period2", period2) :
                new ObjectParameter("Period2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("BatYrDepositBal", coopIDParameter, depTypeIDParameter, userIdParameter, budgetYearParameter, period1Parameter, period2Parameter);
        }
    
        public virtual ObjectResult<BatYrDepositUnpayInt_Result> BatYrDepositUnpayInt(string coopID, Nullable<System.DateTime> calcDate)
        {
            var coopIDParameter = coopID != null ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(string));
    
            var calcDateParameter = calcDate.HasValue ?
                new ObjectParameter("CalcDate", calcDate) :
                new ObjectParameter("CalcDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatYrDepositUnpayInt_Result>("BatYrDepositUnpayInt", coopIDParameter, calcDateParameter);
        }
    
        public virtual ObjectResult<BatYrNewYearDeposit_Result> BatYrNewYearDeposit(string coopID, string newBudgetYear, string userID)
        {
            var coopIDParameter = coopID != null ?
                new ObjectParameter("CoopID", coopID) :
                new ObjectParameter("CoopID", typeof(string));
    
            var newBudgetYearParameter = newBudgetYear != null ?
                new ObjectParameter("NewBudgetYear", newBudgetYear) :
                new ObjectParameter("NewBudgetYear", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BatYrNewYearDeposit_Result>("BatYrNewYearDeposit", coopIDParameter, newBudgetYearParameter, userIDParameter);
        }
    }
}
